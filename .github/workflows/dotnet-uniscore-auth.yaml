name: dotnet - Uniscore.Auth
on:
  push:
    paths:
      - ".github/**"
      - "dotnet/uniscore-auth/**"
env:
  folder: "./dotnet/uniscore-auth"
  name: "uniscore-auth"
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1


jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate version
        id: version
        uses: ./.github/actions/generate-version

  build:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: xt0rted/setup-dotnet@v1
        with:
          dotnet-version: |
            6.0.303
      - name: Add source
        uses: ./.github/actions/dotnet/add-github-source
      - name: Cache nuget
        uses: actions/cache@v1
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ env.folder }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-${{ env.folder }}-
            nuget-${{ runner.os }}-
      - name: Build
        uses: ./.github/actions/dotnet/build-dotnet
        with: 
          folder: ${{ env.folder }}
          version: ${{ needs.init.outputs.version }}

  tests:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: xt0rted/setup-dotnet@v1
        with:
          dotnet-version: |
            6.0.303
      - name: Add source
        uses: ./.github/actions/dotnet/add-github-source
      - name: Run tests
        uses: ./.github/actions/dotnet/test-dotnet
        with:
          folder: ${{ env.folder }}        

  prepare-service-builder:
    runs-on: ubuntu-latest
    needs: init
    outputs:
      tag: ${{ steps.build.outputs.tag }}
      should-build: ${{ steps.build.outputs.should-build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create dockerfile
        id: build
        uses: ./.github/actions/dotnet/create-dockerfile
        with:
          folder: ${{ env.folder }}
          version: ${{ needs.init.outputs.version }}
          name: ${{ env.name }}

  publish-nugets:
    runs-on: ubuntu-latest
    needs: [build, tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Add source
        uses: ./.github/actions/dotnet/add-github-source
      - name: Publish nugets
        uses: ./.github/actions/dotnet/publish-nugets

  upload-test-results:
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Upload tests
        uses: ./.github/actions/upload-to-codecov
        with: 
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          name: ${{ env.name }}  

  build-service-image:
    runs-on: ubuntu-latest
    needs: [prepare-service-builder, tests]
    if: needs.prepare-service-builder.outputs.should-build == 'true'
    steps:
      - name: Test
        run: echo ${{needs.prepare-service-builder.outputs.should-build}}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build dockerfile
        uses: ./.github/actions/dotnet/build-dockerfile
        with:
          tag: ${{ needs.prepare-service-builder.outputs.tag }}
          password: ${{ secrets.GITHUB_TOKEN }}
          packages-pat: ${{ secrets.PACKAGES_PAT }}
          folder: ${{env.folder}}

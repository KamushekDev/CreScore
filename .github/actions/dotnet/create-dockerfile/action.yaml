name: "Create dockerfile"
description: "Create dockerfile and publish to artifacts"
inputs:
  folder:
    description: "Root folder for scanning for solutions"
    required: true
  version: 
    description: "Version to use"
    required: true
  name: 
    description: "Name to use"
    required: true
  dotnet-runtime-version:
    description: "Dotnet runtime version"
    required: true
  dotnet-sdk-version:
    description: "Dotnet sdk version"
    required: true
  registry:
    description: "Registry to use"
    required: true
    default: "ghcr.io"
  repository-owner-name:
    description: "Name of a respository owner"
    required: true
    default: ${{ github.repository_owner }}
  dockerfile-template-path:
    description: "Path to dockerfile template file"
    required: true
    default: ".github/templates/Dockerfile.default.template"
outputs:
  tag:
    description: "Tag that should be used for building dockerfile"
    value: ${{ steps.tag.outputs.tag }}
runs:
  using: "composite"
  steps:
    - name: Get dotnet runtime image name
      id: runtime-image
      run: |
        declare -A runtimes_images_dict
        runtimes_images_dict[6.0.18]='6.0.9-alpine3.16'
        runtimes_images_dict[6.0.18]='7.0.3-alpine3.17'

        if [ ! -v runtimes_images_dict[${{ inputs.dotnet-runtime-version }}] ]; then
          echo "Image for dotnet runtime version ${{ inputs.dotnet-runtime-version }} is not supported"
          exit 1
        else
          echo "runtime-image=runtimes_images_dict[${{ inputs.dotnet-runtime-version }}]" >> $GITHUB_OUTPUT;
        fi
      shell: bash
    - name: Get dotnet sdk image name
      id: sdk-image
      run: |
        declare -A sdk_images_dict
        sdk_images_dict[6.0.410]='6.0.408'
        sdk_images_dict[7.0.304]='7.0.302'

        if [ ! -v sdk_images_dict[${{ inputs.dotnet-sdk-version }}] ]; then
          echo "Image for dotnet sdk version ${{ inputs.dotnet-sdk-version }} is not supported"
          exit 1
        else
          echo "sdk-image=sdk_images_dict[${{ inputs.dotnet-sdk-version }}]" >> $GITHUB_OUTPUT;
        fi
      shell: bash
    - name: Get startup dll
      id: dll
      run: |
        (cd ${{ inputs.folder }} \
        && sln=$(find . -type f -name "*.sln" -printf "%f") \
        && echo "startup-dll=$(echo ${sln[0]} | sed "s/sln/dll/")" >> $GITHUB_OUTPUT)
      shell: bash
    - name: Generate dockerfile from a template
      run: |
        mkdir ${{ inputs.folder }}/temp
        cp .github/templates/.dockerignore ${{ inputs.folder }}/temp/.dockerignore
        sed -e "s/_REPOSITORY_OWNER_NAME_/${{ inputs.repository-owner-name }}/g" \
          -e "s/_STARTUP_DLL_/${{steps.dll.outputs.startup-dll}}/g" \
          -e "s/_RUNTIME_IMAGE_NAME_/aspnet:${{steps.runtime-image.outputs.runtime-image}}/g" \
          -e "s/_SDK_IMAGE_NAME_/sdk:${{steps.sdk-image.outputs.sdk-image}}/g" \
          ${{ inputs.dockerfile-template-path }} > ${{ inputs.folder }}/temp/Dockerfile
      shell: bash
    - name: Upload dockerfile to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dockerfile_${{ inputs.name }}
        path: |
          ${{ inputs.folder }}/temp/Dockerfile
          ${{ inputs.folder }}/temp/.dockerignore
        retention-days: 7
        if-no-files-found: error
    - name: Create tag
      id: tag
      uses: ./.github/actions/create-tag
      with:
        version: ${{inputs.version}}
        name: ${{inputs.name}}
        repository-owner-name: ${{inputs.repository-owner-name}}
        registry: ${{inputs.registry}}